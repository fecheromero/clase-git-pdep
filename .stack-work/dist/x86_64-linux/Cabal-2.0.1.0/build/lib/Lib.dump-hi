
==================== FINAL INTERFACE ====================
2018-04-15 02:35:12.014813 UTC

interface clase-git-0.1.0.0-mPiZdpSPNIBNpw5v4cx9y:Lib 8022
  interface hash: d13fdb18e29f617ff6d89671175c8e0d
  ABI hash: a483032b923b8eeaefc634a645d3ebf0
  export-list hash: d7b7a20dc4555a67c730d23dc47bc27c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e9accdbcca7ef7ccbce1512d00b03bd6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.modificarEdad
  Lib.modificarEnfermedades
  Lib.modificarNombre
  Lib.modificarPeso
  Lib.Raton{Lib.UnRaton edad enfermedades estado nombre peso}
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Err 514b3a24b22e9d7d731c2d0d02d10842
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
d81d5833fb5eb00c49bf9e526a2cc296
  $fEqRaton :: GHC.Classes.Eq Lib.Raton
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Raton Lib.$fEqRaton_$c== Lib.$fEqRaton_$c/= -}
d81d5833fb5eb00c49bf9e526a2cc296
  $fEqRaton_$c/= :: Lib.Raton -> Lib.Raton -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U(U),1*U(U),1*U,1*U(1*U,1*U(U)))><S(SLLLL),1*U(1*U,1*U(U),1*U(U),1*U,1*U(1*U,1*U(U)))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.Raton) (b :: Lib.Raton) ->
                 case Lib.$fEqRaton_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d81d5833fb5eb00c49bf9e526a2cc296
  $fEqRaton_$c== :: Lib.Raton -> Lib.Raton -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U(U),1*U(U),1*U,1*U(1*U,1*U(U)))><S(SLLLL),1*U(1*U,1*U(U),1*U(U),1*U,1*U(1*U,1*U(U)))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Raton) (w1 :: Lib.Raton) ->
                 case w of ww { Lib.UnRaton ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Lib.UnRaton ww7 ww8 ww9 ww10 ww11 ->
                 Lib.$w$c== ww1 ww2 ww3 ww4 ww5 ww7 ww8 ww9 ww10 ww11 } }) -}
d81d5833fb5eb00c49bf9e526a2cc296
  $fShowRaton :: GHC.Show.Show Lib.Raton
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Raton
                  Lib.$fShowRaton_$cshowsPrec
                  Lib.$fShowRaton_$cshow
                  Lib.$fShowRaton_$cshowList -}
d81d5833fb5eb00c49bf9e526a2cc296
  $fShowRaton1 :: Lib.Raton -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U),1*U(U),U,U(U,U(U)))>,
     Unfolding: (\ (w :: Lib.Raton) ->
                 case w of ww { Lib.UnRaton ww1 ww2 ww3 ww4 ww5 ->
                 Lib.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 }) -}
c5725d3e28a0a35f51d8a1c068e45492
  $fShowRaton2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d81d5833fb5eb00c49bf9e526a2cc296
  $fShowRaton_$cshow :: Lib.Raton -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U),1*U(U),U,U(U,U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Raton) ->
                 Lib.$fShowRaton_$cshowsPrec
                   Lib.$fShowRaton2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d81d5833fb5eb00c49bf9e526a2cc296
  $fShowRaton_$cshowList :: [Lib.Raton] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.Raton Lib.$fShowRaton1) -}
d81d5833fb5eb00c49bf9e526a2cc296
  $fShowRaton_$cshowsPrec ::
    GHC.Types.Int -> Lib.Raton -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,1*U(U),1*U(U),U,U(U,U(U)))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Lib.Raton) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.UnRaton ww3 ww4 ww5 ww6 ww7 ->
                 Lib.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 } }) -}
01ab931ae9f4b84d417f20e1f8ca0f38
  $tc'UnRaton :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15276376463818773122##
                   16661686527368254521##
                   Lib.$trModule
                   Lib.$tc'UnRaton2
                   0#
                   Lib.$tc'UnRaton1) -}
ac7fe9145a252caed0e91d30f9597431
  $tc'UnRaton1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6ba2946634a177e6fdf0eb023cad82c5
  $tc'UnRaton2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tc'UnRaton3) -}
1f483e8b4e8cd73047876eaa52ca27c4
  $tc'UnRaton3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnRaton"#) -}
956e33aa860e0511ceb14938065bd33a
  $tcRaton :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17118991955128616930##
                   14574797556970446085##
                   Lib.$trModule
                   Lib.$tcRaton1
                   0#
                   GHC.Types.krep$*) -}
3ee8ffbe68d08c1f4f52a43bf71c830a
  $tcRaton1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$tcRaton2) -}
2322a8221bf302f265d378a27b638fdc
  $tcRaton2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Raton"#) -}
74092ece8811267fc106efa5f693efc4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule3 Lib.$trModule1) -}
b2b6314a46c83ac5a1298b23ca4e5f13
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule2) -}
6709ebd3f6ffdc6f2de173f60745a32e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib"#) -}
90cc6f03ca57d374e52db4def016bd46
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule4) -}
71c9efec6531a527e539c1dc825f3737
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("clase-git-0.1.0.0-mPiZdpSPNIBNpw5v4cx9y"#) -}
99eda51549bd65adc4c05b911ad1dd3f
  $w$c== ::
    GHC.Base.String
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> [GHC.Base.String]
    -> (GHC.Base.String, GHC.Types.Float)
    -> GHC.Base.String
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> [GHC.Base.String]
    -> (GHC.Base.String, GHC.Types.Float)
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(1*U,1*U(U))><S,1*U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(1*U,1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Types.Float)
                   (ww3 :: [GHC.Base.String])
                   (ww4 :: (GHC.Base.String, GHC.Types.Float))
                   (ww5 :: GHC.Base.String)
                   (ww6 :: GHC.Types.Float)
                   (ww7 :: GHC.Types.Float)
                   (ww8 :: [GHC.Base.String])
                   (ww9 :: (GHC.Base.String, GHC.Types.Float)) ->
                 case GHC.Base.eqString ww ww5 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww6 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild4 { GHC.Types.F# x1 ->
                           case ww7 of wild5 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Classes.$fEq[]_$s$c==1 ww3 ww8 of wild7 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww4 of ww10 { (,) ww11 ww12 ->
                                     case ww9 of ww13 { (,) ww14 ww15 ->
                                     case GHC.Base.eqString ww11 ww14 of wild8 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Classes.eqFloat ww12 ww15 } } } } } } } } } } }) -}
e411e6c5c7eb19064569dd3fd69b2c12
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> [GHC.Base.String]
    -> (GHC.Base.String, GHC.Types.Float)
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U><L,1*U(U)><L,1*U(U)><L,U><L,U(U,U(U))>,
     Inline: [0] -}
d81d5833fb5eb00c49bf9e526a2cc296
  data Raton
    = UnRaton {nombre :: GHC.Base.String,
               edad :: GHC.Types.Float,
               peso :: GHC.Types.Float,
               enfermedades :: [GHC.Base.String],
               estado :: (GHC.Base.String, GHC.Types.Float)}
d81d5833fb5eb00c49bf9e526a2cc296
  edad :: Lib.Raton -> GHC.Types.Float
  RecSel Left Lib.Raton
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Raton) ->
                 case ds of wild { Lib.UnRaton ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
d81d5833fb5eb00c49bf9e526a2cc296
  enfermedades :: Lib.Raton -> [GHC.Base.String]
  RecSel Left Lib.Raton
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Raton) ->
                 case ds of wild { Lib.UnRaton ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
d81d5833fb5eb00c49bf9e526a2cc296
  estado :: Lib.Raton -> (GHC.Base.String, GHC.Types.Float)
  RecSel Left Lib.Raton
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Raton) ->
                 case ds of wild { Lib.UnRaton ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
a40c2c3938cec4e0b1c893b74b4f628d
  modificarEdad ::
    (GHC.Types.Float -> GHC.Types.Float) -> Lib.Raton -> Lib.Raton
  {- Arity: 2, Strictness: <B,A><B,A>x,
     Unfolding: InlineRule (2, True, True)
                (\ (modificador :: GHC.Types.Float -> GHC.Types.Float)
                   (raton :: Lib.Raton) ->
                 Lib.modificarEdad1) -}
ca7f8ee556d2a7c074312adab87e189c
  modificarEdad1 :: Lib.Raton
  {- Strictness: x -}
c5b9cb51a58eee531139d70e65901195
  modificarEnfermedades ::
    ([GHC.Base.String] -> [GHC.Base.String]) -> Lib.Raton -> Lib.Raton
  {- Arity: 2, Strictness: <B,A><B,A>x,
     Unfolding: InlineRule (2, True, True)
                (\ (modificador :: [GHC.Base.String] -> [GHC.Base.String])
                   (raton :: Lib.Raton) ->
                 Lib.modificarEnfermedades1) -}
4d209f5507cbf11432197b476f56e773
  modificarEnfermedades1 :: Lib.Raton
  {- Strictness: x -}
789fb3b813d43bc0e92a6010e4ed7a90
  modificarNombre ::
    (GHC.Base.String -> GHC.Base.String) -> Lib.Raton -> Lib.Raton
  {- Arity: 2, Strictness: <B,A><B,A>x,
     Unfolding: InlineRule (2, True, True)
                (\ (modificador :: GHC.Base.String -> GHC.Base.String)
                   (raton :: Lib.Raton) ->
                 Lib.modificarNombre1) -}
fbde391d03638101409996c87243a719
  modificarNombre1 :: Lib.Raton
  {- Strictness: x -}
66d30c09820ba1b5d12253a4d451ebc1
  modificarPeso ::
    (GHC.Types.Float -> GHC.Types.Float) -> Lib.Raton -> Lib.Raton
  {- Arity: 2, Strictness: <B,A><B,A>x,
     Unfolding: InlineRule (2, True, True)
                (\ (modificador :: GHC.Types.Float -> GHC.Types.Float)
                   (raton :: Lib.Raton) ->
                 Lib.modificarPeso1) -}
128117bdc7ea220857da591e7973762b
  modificarPeso1 :: Lib.Raton
  {- Strictness: x -}
d81d5833fb5eb00c49bf9e526a2cc296
  nombre :: Lib.Raton -> GHC.Base.String
  RecSel Left Lib.Raton
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Raton) ->
                 case ds of wild { Lib.UnRaton ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
d81d5833fb5eb00c49bf9e526a2cc296
  peso :: Lib.Raton -> GHC.Types.Float
  RecSel Left Lib.Raton
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLL),1*U(A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Raton) ->
                 case ds of wild { Lib.UnRaton ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
instance [safe] GHC.Classes.Eq [Lib.Raton] = Lib.$fEqRaton
instance [safe] GHC.Show.Show [Lib.Raton] = Lib.$fShowRaton
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

